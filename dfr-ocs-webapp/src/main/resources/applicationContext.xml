<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/jms
                           http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
                           http://camel.apache.org/schema/spring
                           http://camel.apache.org/schema/spring/camel-spring.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="placeholderConfig" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
    <property name="ignoreResourceNotFound" value="true"/>
    <property name="locations">
      <list>
        <value>classpath:dfr-ocs-webapp.properties</value>
        <!-- ext.properties goes last, so properties defined here "win" -->
        <value>classpath:ext.properties</value>
      </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
  </bean>

  <!-- Location and login credentials to the destination repository -->
  <bean id="destinationCredential" class="com.yourmediashelf.fedora.client.FedoraCredentials">
    <constructor-arg type="java.lang.String" value="${dfr.repository.url}"/>
    <constructor-arg type="java.lang.String" value="${dfr.repository.username}"/>
    <constructor-arg type="java.lang.String" value="${dfr.repository.password}"/>
  </bean>

  <!-- The client to use to interact with the destination repository -->
  <bean id="destinationClient" class="com.yourmediashelf.fedora.client.FedoraClient">
    <constructor-arg ref="destinationCredential"/>
  </bean>

  <!-- The destination storage repository itself -->
  <bean id="destinationStoreClient" class="org.duraspace.dfr.ocs.fedora.FedoraObjectStoreClient" init-method="initialize">
    <constructor-arg ref="destinationClient"/>
  </bean>

  <!-- The OCS object creation processor -->
  <bean id="contentProcessor" class="org.duraspace.dfr.ocs.simpleproc.SimpleProcessor" depends-on="destinationStoreClient">
    <constructor-arg type="java.lang.String" value="${dfr.object.prefix}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentsource.url}"/>
  </bean>

  <!-- The supported cloud storage provider back-end -->
  <bean id="storageType" class="org.duracloud.storage.domain.StorageProviderType" factory-method="valueOf">
    <constructor-arg>
      <value>AMAZON_S3</value>
    </constructor-arg>
  </bean>

  <!-- A utility for connecting to the cloud storage provider -->
  <bean id="httpHelper" class="org.duracloud.common.web.RestHttpHelper"/>

  <bean id="sourceCredential" class="org.duracloud.common.model.Credential">
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.username}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.password}"/>
  </bean>

  <!-- The manager of the client to interact with the cloud storage provider  -->
  <bean id="sourceStoreManager" class="org.duracloud.client.ContentStoreManagerImpl">
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.host}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.port}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.context}"/>
  </bean>

  <bean id="sourceStoreClient" class="org.duraspace.dfr.ocs.duracloud.DuraCloudObjectStoreClient">
    <constructor-arg ref="sourceStoreManager"/>
    <constructor-arg ref="sourceCredential"/>
  </bean>

  <!-- this is the Message Driven POJO (MDP) -->
  <bean id="createMessageProcessor" class="org.duraspace.dfr.ocs.duracloud.DuraCloudObjectCreatedMessageTranslator">
    <constructor-arg ref="sourceStoreClient"/>
  </bean>

  <!--  ActiveMQ destinations to use  -->
  <bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
    <constructor-arg type="java.lang.String" value="${dfr.broker.topics}"/>
  </bean>

  <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
  <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${dfr.broker.url}"/>
  </bean>

  <!-- Use a pooled connections for scalability -->
  <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
    <property name="maxConnections" value="8" />
    <property name="connectionFactory" ref="connectionFactory" />
  </bean>

  <!-- Use pooled connections for JMS -->
  <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
    <property name="connectionFactory" ref="pooledConnectionFactory"/>
    <property name="concurrentConsumers" value="1"/>
    <!-- Until we choose our means of consuming this avoids duplication -->
    <!-- <property name="concurrentConsumers" value="10"/> -->
  </bean>

  <!-- Use the Camel JMS Components for performance and route flexibility -->
  <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
    <property name="connectionFactory" ref="connectionFactory"/>
  </bean>

  <!-- Use the Camel AMQ component for performance -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="configuration" ref="jmsConfig"/>
  </bean>

  <!-- Splits a single incoming storage message into additional messages -->
  <bean id="createSplitter" class="org.duraspace.dfr.ocs.duracloud.DuraCloudObjectCreatedMessageSplitter"/>

  <!-- Provides the Camel routing setup -->
  <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring" trace="true">
    <route>
      <from uri="activemq:topic:org.duracloud.topic.change.content.ingest?mapJmsMessage=false%26selector=spaceId%20NOT%20IN%20('x-duracloud-admin',%20'x-service-out',%20'x-service-work',%20'fedora-objects')"/>
      <log message="Incoming Storage Message" loggingLevel="INFO"/>
      <bean ref="createMessageProcessor" method="onMessage"/>
      <split>
        <method bean="createSplitter" method="splitBody"/>
        <bean ref="contentProcessor" method="process"/>
        <bean ref="destinationStoreClient" method="ingest"/>
      </split>
    </route>
  </camelContext>

  <!-- <to uri="log:dfr.camel?showAll=true"/> -->

</beans>