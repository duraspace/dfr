<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/jms
                           http://www.springframework.org/schema/jms/spring-jms-3.0.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="placeholderConfig" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
    <property name="ignoreResourceNotFound" value="true"/>
    <property name="locations">
      <list>
        <value>classpath:dfr-ocs-webapp.properties</value>
        <!-- ext.properties goes last, so properties defined here "win" -->
        <value>classpath:ext.properties</value>
      </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true"/>
  </bean>

  <!-- Location and login credentials to the target repository -->
  <bean id="repositoryCredentials" class="com.yourmediashelf.fedora.client.FedoraCredentials">
    <constructor-arg type="java.lang.String" value="${dfr.repository.url}"/>
    <constructor-arg type="java.lang.String" value="${dfr.repository.username}"/>
    <constructor-arg type="java.lang.String" value="${dfr.repository.password}"/>
  </bean>

  <!-- The client to use to interact with the repository -->
  <bean id="repositoryClient" class="com.yourmediashelf.fedora.client.FedoraClient">
    <constructor-arg ref="repositoryCredentials"/>
  </bean>

  <!-- The repository itself -->
  <bean id="objectRepository" class="org.duraspace.dfr.ocs.fedora.FedoraRepository">
    <constructor-arg ref="repositoryClient"/>
  </bean>

  <!-- The OCS object creation processor -->
  <bean id="contentProcessor" class="org.duraspace.dfr.ocs.simpleproc.SimpleProcessor" depends-on="objectRepository">
    <constructor-arg type="java.lang.String" value="${dfr.object.prefix}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentsource.url}"/>
    <property name="fedoraObjectStore" ref="objectRepository"/>
  </bean>

  <!-- The supported cloud storage provider back-end -->
  <bean id="storageType" class="org.duracloud.storage.domain.StorageProviderType" factory-method="valueOf">
    <constructor-arg>
      <value>AMAZON_S3</value>
    </constructor-arg>
  </bean>

  <!-- A utility for connecting to the cloud storage provider -->
  <bean id="httpHelper" class="org.duracloud.common.web.RestHttpHelper"/>

  <!--
  <bean id="storageCredential" class="org.duracloud.common.model.Credential">
    <constructor-arg type="java.lang.String" value="dfrtest"/>
    <constructor-arg type="java.lang.String" value="research!"/>
  </bean>
  -->

  <!-- The manager of the client to interact with the cloud storage provider  -->
  <bean id="contentStoreManager" class="org.duracloud.client.ContentStoreManagerImpl">
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.host}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.port}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.context}"/>
  </bean>

  <!-- The client to interact with the cloud storage provider  -->
  <!--
  <bean id="contentStore" class="org.duracloud.client.ContentStoreImpl">
    <constructor-arg type="java.lang.String" value="dfrtest.duracloud.org"/>
    <constructor-arg ref="storageType"/>
    <constructor-arg type="java.lang.String" value="storeID"/>
    <constructor-arg ref="httpHelper"/>
  </bean>
  -->

  <!-- this is the Message Driven POJO (MDP) -->
  <bean id="messageListener" class="org.duraspace.dfr.ocs.duracloud.DuraCloudStorageListener">
    <constructor-arg ref="contentStoreManager"/>
    <constructor-arg ref="contentProcessor"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.username}"/>
    <constructor-arg type="java.lang.String" value="${dfr.contentstore.password}"/>
  </bean>

  <!--  ActiveMQ destinations to use  -->
  <bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
    <constructor-arg type="java.lang.String" value="${dfr.broker.topics}"/>
  </bean>

  <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
  <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${dfr.broker.url}"/>
  </bean>

  <!-- and this is the message listener container -->
  <bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
    <property name="connectionFactory" ref="connectionFactory"/>
    <property name="destination" ref="destination"/>
    <property name="messageListener" ref="messageListener" />
  </bean>

  <!-- and this is the storage message listener service -->
  <bean id="storageListenerService" class="org.duraspace.dfr.app.services.StorageListenerService">
    <constructor-arg ref="listenerContainer"/>
  </bean>

</beans>